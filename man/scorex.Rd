% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scorex.R
\name{scorex}
\alias{scorex}
\title{scorex}
\usage{
scorex(formula, data, cut_method = c("bins", "breaks", "percentiles"),
  method_args = NULL, exceptions = NA, custom_cut_fnc = NULL, ...)
}
\arguments{
\item{formula}{A formula of the form LHS ~ RHS to use to specify which fields
to use as the scores and performance measures in the tables, see Details.}

\item{data}{A data.frame, that has the fields specified in the formula.}

\item{cut_method}{The method to use to format the score in the final table.
The method may be a single charcter specifying the cut method, or a list with
two elements, specifing the method for the left, and right side of the formula
respectively.
Currently the available methods are:
\itemize{
  \item \code{bins}: Break the scores into a set number of even bins.
  \item \code{breaks}: Set the score values to break the score at.
  \item \code{percentiles}: Set the percentiles to use to break the scores at.
}}

\item{method_args}{Arguments to use for the method specified in \code{cut_method}
each method uses the following argument.
If \code{cut_method} is a list of two methods, \code{method_args} must also be a
list of two elements, specifying the method arguments for the left and right side
of the formula respectively.
\itemize{
  \item \code{bins}: Provide a integer specifying the even number of breaks to create.
  \item \code{breaks}: Provide an integer vector that specifies the cuts to use.
  \item \code{percentiles}: Provide a vector of percentiles between the values of 0 and 1.
}}

\item{exceptions}{A vector of exception values to exclude from the cross table.
The default is set to \code{NA}.}

\item{custom_cut_fnc}{A custom function to use to cut the scores.}

\item{...}{Other arguments to pass to the \code{custom_cut_fnc}}
}
\value{
An object of class \code{scorex}.
}
\description{
A dual score matrix function that allows for multiple
performance, and cross variables.
}
\details{
\strong{Formula...}

  The formula interface of scorex provides an API for intuatively creating dual score matrices.
  The formula takes the following form:

  \strong{\code{LHS ~ RHS | extra vars}}

  Each portion of the formula allows for the following funtionality.
  \describe{
      \item{LHS}{This portion of the formula can be used to identify one or several
      score like variables, each seperated with a \code{+}, that will be displayed along
      the right most column of the scorex table.}
      \item{RHS}{This portion of the formula can be used to identify one or several
      score like variables, each seperated with a \code{+}, that will be displayed along
      the first row of the scorex table.}
      \item{extra vars}{Optional variables to distribute along the score variables.
      By default these variables will be treated as binary performance fields, and the
      rate and total will be displayed. A \code{!} symbol (exclaimation mark) may be
      used to signify that the variable should be treated like a continuous numeric field
      such as a dollar value.}
           }
   If more than one variable is placed in the `LHS` or `RHS` of the formula
   dual score tables will be created of all possible combinations of the cross variables.
}
\examples{
# Formula Examples
mc_tabs <- scorex(disp ~ hp, data = mtcars)
mc_tabs$tables

mc_tabs <- scorex(disp ~ hp | vs, data = mtcars)
mc_tabs$tables

mc_tabs <- scorex(disp ~ hp + mpg | vs, data = mtcars)
mc_tabs$tables

mc_tabs <- scorex(disp ~ hp + mpg | vs + !wt, data = mtcars)
mc_tabs$tables

# Examples of cut method
mc_tabs <- scorex(disp ~ hp | vs, data = mtcars,
                  cut_method = "bins", method_args = 4)
mc_tabs$tables

mc_tabs <- scorex(disp ~ hp | vs, data = mtcars,
                  cut_method = list("bins", "percentiles"),
                  method_args = list(2, c(1, 25, 75, 100)))
mc_tabs$tables


}
